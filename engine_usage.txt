\5-informatics-sql\sqlalchemy\my_db.db






rade pip

(.venv) C:\Users\SURFACE\Desktop\ONGOING\6-sqalchem-tutorial\slides>sliderepl 01_engine_usage.py
% presentation mode is now OFF
<sqlalchemy.engine.cursor.LegacyCursorResult object at 0x000001B389CA3CE0>
<sqlalchemy.engine.cursor.LegacyCursorResult object at 0x000001B38C51D580>
<sqlalchemy.engine.cursor.LegacyCursorResult object at 0x000001B38C51D730>
%% executed initial setup slide.
%%
%% Running Deck: 01_engine_usage.py
%% Running Deck: 01_engine_usage.py
%%
%% This is an interactive Python prompt.
%% Enter "?" for command list.
%% Commands always begin with a ! symbol
%% Running Deck: 01_engine_usage.py
%%
%% This is an interactive Python prompt.
%% Enter "?" for command list.
%% Running Deck: 01_engine_usage.py
%%
%% This is an interactive Python prompt.
%% Running Deck: 01_engine_usage.py
%%
%% This is an interactive Python prompt.
%% Running Deck: 01_engine_usage.py
%%
%%
%% This is an interactive Python prompt.
%% This is an interactive Python prompt.
%% Enter "?" for command list.
%% Commands always begin with a ! symbol
%% Advance slides by pressing "enter",
%% or entering the "!n" or "!next" command.
%% Quit out of this deck by entering the "!q" or "!quit" command.

>>>

┌────────────────────────────────────────────────────────────────────┐
│ *** Engine Basics ***                                              │
├────────────────────────────────────────────────────────────────────┤

>>>

┌────────────────────────────────────────────────────────────────────┐
│ *** Engine Basics ***                                              │
├────────────────────────────────────────────────────────────────────┤
│ create_engine() builds a *factory* for database connections.       │
│ Below we create an engine that will connect to a SQLite database.  │
│ "future" means we want the full 2.0 behavior.                      │
└──────────────────────────────────────────────────────── (1 / 18) ──┘

>>> from sqlalchemy import create_engine


>>>

┌────────────────────────────────────────────────────────────────────┐
│ *** Engine Basics ***                                              │
├────────────────────────────────────────────────────────────────────┤
│ create_engine() builds a *factory* for database connections.       │
│ Below we create an engine that will connect to a SQLite database.  │
│ "future" means we want the full 2.0 behavior.                      │
└──────────────────────────────────────────────────────── (1 / 18) ──┘


>>>

┌────────────────────────────────────────────────────────────────────┐
│ *** Engine Basics ***                                              │
├────────────────────────────────────────────────────────────────────┤
│ create_engine() builds a *factory* for database connections.       │
│ Below we create an engine that will connect to a SQLite database.  │
>>>

┌────────────────────────────────────────────────────────────────────┐
│ *** Engine Basics ***                                              │
├────────────────────────────────────────────────────────────────────┤
┌────────────────────────────────────────────────────────────────────┐
│ *** Engine Basics ***                                              │
├────────────────────────────────────────────────────────────────────┤
│ create_engine() builds a *factory* for database connections.       │
│ create_engine() builds a *factory* for database connections.       │
│ Below we create an engine that will connect to a SQLite database.  │
│ "future" means we want the full 2.0 behavior.                      │
└──────────────────────────────────────────────────────── (1 / 18) ──┘

>>> from sqlalchemy import create_engine

>>> engine = create_engine("sqlite:///some.db", future=True)

>>>
│ Below we create an engine that will connect to a SQLite database.  │
│ "future" means we want the full 2.0 behavior.                      │
└──────────────────────────────────────────────────────── (1 / 18) ──┘

>>> from sqlalchemy import create_engine

>>> engine = create_engine("sqlite:///some.db", future=True)
│ Below we create an engine that will connect to a SQLite database.  │
│ "future" means we want the full 2.0 behavior.                      │
│ Below we create an engine that will connect to a SQLite database.  │
│ Below we create an engine that will connect to a SQLite database.  │
│ "future" means we want the full 2.0 behavior.                      │
└──────────────────────────────────────────────────────── (1 / 18) ──┘

>>> from sqlalchemy import create_engine

>>> engine = create_engine("sqlite:///some.db", future=True)

>>>

┌──────────────────────────────────────────────────────────────────────────┐
│ The Engine doesn't actually connect until we tell it to for the first    │
│ time.  When using it directly, we get a connection using the .connect()  │
│ method.                                                                  │
└────────────────────────────────────────────────────────────── (2 / 18) ──┘

>>> connection = engine.connect()
>>> connection
<sqlalchemy.future.engine.Connection object at 0x000001B389D1DD60>

>>> 

┌──────────────────────────────────────────────────────────────────────────┐
│ The Connection is a so-called **proxy** for a DBAPI connection.  We can  │
│ see it by peeking at the .connection attribute, then .connection again   │
└────────────────────────────────────────────────────────────── (3 / 18) ──┘

>>> connection.connection.connection
<sqlite3.Connection object at 0x000001B38C5444F0>

>>>

┌───────────────────────────────────────────────────────────────────────────┐
│ The Connection then features an .execute() method that will run queries.  │
│ To invoke a textual query we use the text() construct                     │
└─────────────────────────────────────────────────────────────── (4 / 18) ──┘

>>> from sqlalchemy import text
>>> stmt = text("select emp_id, emp_name from employee where emp_id=:emp_id")
>>> result = connection.execute(stmt, {"emp_id": 2})

[press return to run code]

>>>

┌───────────────────────────────────────────────────────────────────────────┐
│ the result object we get back is similar to a cursor, with more methods,  │
│ such as first() which will return the first row and close the result set  │
└─────────────────────────────────────────────────────────────── (5 / 18) ──┘

>>> row = result.first()

>>>

┌──────────────────────────────────────────────────────────────────┐
│ the row looks and acts mostly like a named tuple                 │
└────────────────────────────────────────────────────── (6 / 18) ──┘

>>> row
(2, 'sandy')
>>> row[1]
'sandy'
>>> row.emp_name
'sandy'

>>>

┌─────────────────────────────────────────────────────────────────────────┐
│ it also has a dictionary interface, which is available via an accessor  │
│ called ._mapping                                                        │
└───────────────────────────────────────────────────────────── (7 / 18) ──┘

>>> row._mapping["emp_name"]
'sandy'

>>>

┌──────────────────────────────────────────────────────────────────┐
│ common idiomatic Python patterns including iteration and tuple   │
│ assignment are available (and likely the most common usage)      │
└────────────────────────────────────────────────────── (8 / 18) ──┘

>>> result = connection.execute(text("select * from employee"))
>>> for emp_id, emp_name in result:
...     print(f"employee id: {emp_id}   employee name: {emp_name}")

[press return to run code]
employee id: 1   employee name: spongebob
employee id: 2   employee name: sandy
employee id: 3   employee name: squidward

>>>

┌──────────────────────────────────────────────────────────────────────────┐
│ there's also other methods like all().   More methods will be discussed  │
│ later.                                                                   │
└────────────────────────────────────────────────────────────── (9 / 18) ──┘

>>> result = connection.execute(text("select * from employee"))
>>> result.all()

[press return to run code]
[(1, 'spongebob'), (2, 'sandy'), (3, 'squidward')]

>>>

┌──────────────────────────────────────────────────────────────────┐
│ Connection has a .close() method.  This **releases** the         │
│ DBAPI connection back to the connection pool.  This typically    │
│ does not actually close the DBAPI connection unless the pool is  │
│ in overflow mode.                                                │
└───────────────────────────────────────────────────── (10 / 18) ──┘

>>> connection.close()

>>>

┌────────────────────────────────────────────────────────────────────────┐
│ Usually, modern Python code should manage the connect/release process  │
│ using context managers.                                                │
└─────────────────────────────────────────────────────────── (11 / 18) ──┘

>>> with engine.connect() as connection:
...     rows = connection.execute(text("select * from employee")).all()

[press return to run code]

>>>

┌────────────────────────────────────────────────────────────────────────────┐
│ *** transactions, committing ***                                           │
├────────────────────────────────────────────────────────────────────────────┤
│ Unlike previous SQLAlchemy versions, SQLAlchemy 2.0 has no concept         │
│ of "library level" autocommit; which means, if the DBAPI driver is in      │
│ a transaction, SQLAlchemy will never commit it automatically.   The usual  │
│ way to commit is called "commit as you go"                                 │
└─────────────────────────────────────────────────────────────── (12 / 18) ──┘

>>> with engine.connect() as connection:
...     connection.execute(
...         text("insert into employee_of_month (emp_name) values (:emp_name)"),
...         {"emp_name": "sandy"},
...     )
...     connection.commit()

[press return to run code]
<sqlalchemy.engine.cursor.CursorResult object at 0x000001B38C51E630>

>>>

┌────────────────────────────────────────────────────────────────────────────────┐
│ the other way is called "begin once", when you just have a single transaction  │
│ to commit                                                                      │
└─────────────────────────────────────────────────────────────────── (13 / 18) ──┘

>>> with engine.begin() as connection:
...     connection.execute(
...         text("insert into employee_of_month (emp_name) values (:emp_name)"),
...         {"emp_name": "squidward"},
...     )
...  # end of block: commits transaction, releases connection back to the
...  # connection pool. rolls back if there is an exception before re-throwing

[press return to run code]
<sqlalchemy.engine.cursor.CursorResult object at 0x000001B38C51EA80>

>>>

┌──────────────────────────────────────────────────────────────────┐
│ You can also use begin() blocks local to the connection          │
└───────────────────────────────────────────────────── (14 / 18) ──┘

>>> with engine.connect() as connection:
...     with connection.begin():
...         connection.execute(
...             text("update employee_of_month set emp_name = :emp_name"),
...             {"emp_name": "squidward"},
...         )
...     # end of inner block: commits transaction, or rollback if exception
...  # end of outer block: releases connection to the connection pool

[press return to run code]
<sqlalchemy.engine.cursor.CursorResult object at 0x000001B38C51EBA0>

>>>

┌──────────────────────────────────────────────────────────────────┐
│ transactions support "nesting", which is implemented using the   │
│ SAVEPOINT construct.                                             │
└───────────────────────────────────────────────────── (15 / 18) ──┘

>>> with engine.connect() as connection:
...     with connection.begin():
...         savepoint = connection.begin_nested()
...         connection.execute(
...             text("update employee_of_month set emp_name = :emp_name"),
...             {"emp_name": "patrick"},
...         )
...         savepoint.rollback()  # sorry patrick

...         with connection.begin_nested() as savepoint:
...             connection.execute(
...                 text("update employee_of_month set emp_name = :emp_name"),
...                 {"emp_name": "spongebob"},
...             )
...             # releases savepoint

...         # commits transaction, or rollback if exception
...     # releases connection to the connection pool

[press return to run code]
<sqlalchemy.engine.cursor.CursorResult object at 0x000001B38C51EAE0>
<sqlalchemy.engine.cursor.CursorResult object at 0x000001B38C51ECF0>

>>>

┌────────────────────────────────────────────────────────────────────────┐
│ most DBAPIs support autocommit now, which is why SQLAlchemy no longer  │
│ does.  To use driver level autocommit, use execution options:          │
└─────────────────────────────────────────────────────────── (16 / 18) ──┘

>>> with engine.connect().execution_options(isolation_level="AUTOCOMMIT") as connection:
...     connection.execute(
...         text("insert into employee(emp_name) values (:name)"),
...         {"name": "plankton"},
...     )

[press return to run code]
<sqlalchemy.engine.cursor.CursorResult object at 0x000001B38C51EAE0>

>>>

┌──────────────────────────────────────────────────────────────────┐
│ the data was autocommitted                                       │
└───────────────────────────────────────────────────── (17 / 18) ──┘

>>> with engine.connect() as connection:
...     planktons_id = connection.execute(
...         text("select emp_id from employee where emp_name=:name"),
...         {"name": "plankton"}
...     ).scalar()
...     print(planktons_id)

[press return to run code]
4

>>>

┌──────────────────────────────────────────────────────────────────┐
│ *** Questions? ***                                               │
└───────────────────────────────────────────────────── (18 / 18) ──┘


>>>
%% The slideshow is over.